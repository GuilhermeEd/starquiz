{"version":3,"sources":["App.js","routes/history.js","routes/paths.js","pages/PublicPage.js","pages/HomePage.js","routes/Routes.js","store/index.js","store/config.js","serviceWorker.js","index.js"],"names":["module","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_hot_loader__WEBPACK_IMPORTED_MODULE_1__","react_router_dom__WEBPACK_IMPORTED_MODULE_2__","_routes_history__WEBPACK_IMPORTED_MODULE_3__","_routes_Routes__WEBPACK_IMPORTED_MODULE_4__","hot","a","createElement","history","history_createBrowserHistory__WEBPACK_IMPORTED_MODULE_0__","history_createBrowserHistory__WEBPACK_IMPORTED_MODULE_0___default","createHistory","paths","path","component","react_default","default","withRouter","defaultPath","find","routes","map","route","Route","Object","assign","key","exact","Switch","Redirect","to","rootSaga","rootReducer","combineReducers","regenerator_default","wrap","_context","prev","next","all","stop","_marked","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","enhancer","applyMiddleware","store","createStore","run","Boolean","location","hostname","match","ReactDOM","render","es","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0FAAA,SAAAA,GAAA,IAAAC,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAAAI,EAAAH,EAAA,IAAAI,EAAAJ,EAAA,IAAAK,EAAAL,EAAA,IAAAM,EAAAN,EAAA,IAAAA,EAAA,IAaeO,kBAAIT,EAAJS,CANH,kBACVN,EAAAO,EAAAC,cAACL,EAAA,EAAD,CAAQM,QAASA,KACfT,EAAAO,EAAAC,cAACH,EAAA,EAAD,gECTJ,IAAAK,EAAAX,EAAA,IAAAY,EAAAZ,EAAAE,EAAAS,GAEeE,+FCaAC,EAZD,CACZ,CACEC,KAAM,IACNC,UCJe,kBAAMC,EAAAT,EAAAC,cAAA,yBDKrBS,SAAS,GAEX,CACEH,KAAM,QACNC,UETa,kBAAMC,EAAAT,EAAAC,cAAA,yBCmBRU,gBAjBA,WACb,IAAMC,EAAcN,EAAMO,KAAK,SAAAN,GAAI,OAAIA,EAAKG,UAMtCI,EAASR,EAAMS,IAJJ,SAAAC,GAAK,OAAIP,EAAAT,EAAAC,cAACgB,EAAA,EAADC,OAAAC,OAAA,CAAOC,IAAKJ,EAAMT,MAAUS,EAA5B,CAAmCK,OAAK,OAMlE,OACEZ,EAAAT,EAAAC,cAACqB,EAAA,EAAD,KACGR,EACDL,EAAAT,EAAAC,cAACgB,EAAA,EAAD,CAAOT,UAPS,kBAAMC,EAAAT,EAAAC,cAACsB,EAAA,EAAD,CAAUC,GAAIZ,EAAYL,mOCIpCkB,GALLC,EAAcC,YAAgB,IAKpC,SAAWF,IAAX,OAAAG,EAAA5B,EAAA6B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACL,OADKF,EAAAE,KAAA,EACCC,YAAI,IADL,wBAAAH,EAAAI,SAAAC,GCTP,IAAMC,EAAqC,kBAAXC,QAAuBA,OAAOC,qCAC1DD,OAAOC,qCAAqC,IAC5CC,IAEEC,EAAiBC,cAIjBC,EAAWN,EACfO,YAAgBH,IAGZI,EAAQC,YAAYnB,EANL,GAMgCgB,GAErDF,EAAeM,IAAIrB,GAEJmB,QCRKG,QACW,cAA7BV,OAAOW,SAASC,UAEe,UAA7BZ,OAAOW,SAASC,UAEhBZ,OAAOW,SAASC,SAASC,MACvB,6ECVNC,IAASC,OACP3C,EAAAT,EAAAC,cAACoD,EAAA,EAAD,CAAUT,MAAOA,GACfnC,EAAAT,EAAAC,cAACqD,EAAA,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9dcc913b.chunk.js","sourcesContent":["import React from 'react'\nimport { hot } from 'react-hot-loader'\nimport { Router } from 'react-router-dom'\nimport history from './routes/history'\nimport Routes from './routes/Routes'\nimport './App.css'\n\nconst App = () => (\n  <Router history={history}>\n    <Routes />\n  </Router>\n)\n\nexport default hot(module)(App)\n","import createHistory from 'history/createBrowserHistory'\r\n\r\nexport default createHistory()\r\n","import HomePage from '../pages/HomePage'\r\nimport PublicPage from '../pages/PublicPage'\r\n\r\nconst paths = [\r\n  {\r\n    path: '/',\r\n    component: PublicPage,\r\n    default: true\r\n  },\r\n  {\r\n    path: '/home',\r\n    component: HomePage\r\n  }\r\n]\r\n\r\nexport default paths\r\n","import React from 'react'\r\n\r\nconst PublicPage = () => <h1>PublicPage</h1>\r\n\r\nexport default PublicPage\r\n","import React from 'react'\r\n\r\nconst HomePage = () => <h1>HomePage</h1>\r\n\r\nexport default HomePage\r\n","import React from 'react'\r\nimport { Switch, Route, Redirect, withRouter } from 'react-router-dom'\r\nimport paths from './paths'\r\n\r\nconst Routes = () => {\r\n  const defaultPath = paths.find(path => path.default)\r\n\r\n  const setRoute = route => <Route key={route.path} {...route} exact />\r\n\r\n  const setRedirect = () => <Redirect to={defaultPath.path} />\r\n\r\n  const routes = paths.map(setRoute)\r\n\r\n  return (\r\n    <Switch>\r\n      {routes}\r\n      <Route component={setRedirect} />\r\n    </Switch>\r\n  )\r\n}\r\n\r\nexport default withRouter(Routes)\r\n","import { combineReducers } from 'redux'\r\nimport { all } from 'redux-saga/effects'\r\n\r\n// Reducers\r\n\r\n// Sagas\r\n\r\n// Configure Reducers\r\nexport const rootReducer = combineReducers({\r\n  //  reducer()\r\n})\r\n\r\n// Configure Sagas\r\nexport function * rootSaga () {\r\n  yield all([\r\n    //  saga()\r\n  ])\r\n}\r\n","import { createStore, compose, applyMiddleware } from 'redux'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport { rootReducer, rootSaga } from './index'\r\n\r\nconst composeEnhancers = typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n  ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({})\r\n  : compose\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\n\r\nconst initialState = {}\r\n\r\nconst enhancer = composeEnhancers(\r\n  applyMiddleware(sagaMiddleware)\r\n)\r\n\r\nconst store = createStore(rootReducer, initialState, enhancer)\r\n\r\nsagaMiddleware.run(rootSaga)\r\n\r\nexport default store\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport store from './store/config'\nimport * as serviceWorker from './serviceWorker'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}